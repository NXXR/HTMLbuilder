/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.hTMLbuild.Div;
import org.xtext.example.mydsl.hTMLbuild.Element;
import org.xtext.example.mydsl.hTMLbuild.HTMLbuildPackage;
import org.xtext.example.mydsl.hTMLbuild.Image;
import org.xtext.example.mydsl.hTMLbuild.Link;
import org.xtext.example.mydsl.hTMLbuild.Model;
import org.xtext.example.mydsl.hTMLbuild.Next;
import org.xtext.example.mydsl.hTMLbuild.Style;
import org.xtext.example.mydsl.hTMLbuild.Text;
import org.xtext.example.mydsl.hTMLbuild.Then;
import org.xtext.example.mydsl.services.HTMLbuildGrammarAccess;

@SuppressWarnings("all")
public class HTMLbuildSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HTMLbuildGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HTMLbuildPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HTMLbuildPackage.DIV:
				sequence_Div(context, (Div) semanticObject); 
				return; 
			case HTMLbuildPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case HTMLbuildPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case HTMLbuildPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case HTMLbuildPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case HTMLbuildPackage.NEXT:
				sequence_Next(context, (Next) semanticObject); 
				return; 
			case HTMLbuildPackage.STYLE:
				sequence_Style(context, (Style) semanticObject); 
				return; 
			case HTMLbuildPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case HTMLbuildPackage.THEN:
				sequence_Then(context, (Then) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns Div
	 *     Element returns Div
	 *     Div returns Div
	 *
	 * Constraint:
	 *     (div_id=ID? divelements+=Element (separators+=Separator divelements+=Element)*)
	 */
	protected void sequence_Div(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     elem=[Content|ID]
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HTMLbuildPackage.Literals.ELEMENT__ELEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HTMLbuildPackage.Literals.ELEMENT__ELEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getElemContentIDTerminalRuleCall_1_0_1(), semanticObject.eGet(HTMLbuildPackage.Literals.ELEMENT__ELEM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Image
	 *     Content returns Image
	 *     Image returns Image
	 *     Element returns Image
	 *
	 * Constraint:
	 *     (name=ID (link=[Link|ID] | newlink=Link))
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Link
	 *     Content returns Link
	 *     Link returns Link
	 *     Element returns Link
	 *
	 * Constraint:
	 *     (name=ID? (address=STRING | anchor=[Content|ID]) linktext=STRING?)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Separator returns Next
	 *     Next returns Next
	 *
	 * Constraint:
	 *     (hasratio?='(' ratios+=INT? ratios+=INT)?
	 */
	protected void sequence_Next(ISerializationContext context, Next semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Style
	 *     Style returns Style
	 *
	 * Constraint:
	 *     (style_id=ID (link=[Link|ID] | newlink=Link))
	 */
	protected void sequence_Style(ISerializationContext context, Style semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Text
	 *     Content returns Text
	 *     Text returns Text
	 *     Element returns Text
	 *
	 * Constraint:
	 *     (name=ID? (h1?='#' | h2?='##' | h3?='###')?)
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Separator returns Then
	 *     Then returns Then
	 *
	 * Constraint:
	 *     (hasratio?='(' ratios+=INT? ratios+=INT)?
	 */
	protected void sequence_Then(ISerializationContext context, Then semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
