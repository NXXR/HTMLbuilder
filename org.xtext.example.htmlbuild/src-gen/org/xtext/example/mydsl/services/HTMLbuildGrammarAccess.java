/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HTMLbuildGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStyleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	Style | Content | Div;
		@Override public ParserRule getRule() { return rule; }
		
		//Style | Content | Div
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Style
		public RuleCall getStyleParserRuleCall_0() { return cStyleParserRuleCall_0; }
		
		//Content
		public RuleCall getContentParserRuleCall_1() { return cContentParserRuleCall_1; }
		
		//Div
		public RuleCall getDivParserRuleCall_2() { return cDivParserRuleCall_2; }
	}
	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyle_idAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStyle_idIDTerminalRuleCall_1_0 = (RuleCall)cStyle_idAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLinkAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cLinkLinkCrossReference_3_0_0 = (CrossReference)cLinkAssignment_3_0.eContents().get(0);
		private final RuleCall cLinkLinkIDTerminalRuleCall_3_0_0_1 = (RuleCall)cLinkLinkCrossReference_3_0_0.eContents().get(1);
		private final Assignment cNewlinkAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNewlinkLinkParserRuleCall_3_1_0 = (RuleCall)cNewlinkAssignment_3_1.eContents().get(0);
		
		//Style:
		//	'Style' style_id=ID ':' (link=[Link] | newlink=Link);
		@Override public ParserRule getRule() { return rule; }
		
		//'Style' style_id=ID ':' (link=[Link] | newlink=Link)
		public Group getGroup() { return cGroup; }
		
		//'Style'
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }
		
		//style_id=ID
		public Assignment getStyle_idAssignment_1() { return cStyle_idAssignment_1; }
		
		//ID
		public RuleCall getStyle_idIDTerminalRuleCall_1_0() { return cStyle_idIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(link=[Link] | newlink=Link)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//link=[Link]
		public Assignment getLinkAssignment_3_0() { return cLinkAssignment_3_0; }
		
		//[Link]
		public CrossReference getLinkLinkCrossReference_3_0_0() { return cLinkLinkCrossReference_3_0_0; }
		
		//ID
		public RuleCall getLinkLinkIDTerminalRuleCall_3_0_0_1() { return cLinkLinkIDTerminalRuleCall_3_0_0_1; }
		
		//newlink=Link
		public Assignment getNewlinkAssignment_3_1() { return cNewlinkAssignment_3_1; }
		
		//Link
		public RuleCall getNewlinkLinkParserRuleCall_3_1_0() { return cNewlinkLinkParserRuleCall_3_1_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Content:
		//	Text | Image | Link;
		@Override public ParserRule getRule() { return rule; }
		
		//Text | Image | Link
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Text
		public RuleCall getTextParserRuleCall_0() { return cTextParserRuleCall_0; }
		
		//Image
		public RuleCall getImageParserRuleCall_1() { return cImageParserRuleCall_1; }
		
		//Link
		public RuleCall getLinkParserRuleCall_2() { return cLinkParserRuleCall_2; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cH1Assignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cH1NumberSignKeyword_4_0_0 = (Keyword)cH1Assignment_4_0.eContents().get(0);
		private final Assignment cH2Assignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cH2NumberSignNumberSignKeyword_4_1_0 = (Keyword)cH2Assignment_4_1.eContents().get(0);
		private final Assignment cH3Assignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Keyword cH3NumberSignNumberSignNumberSignKeyword_4_2_0 = (Keyword)cH3Assignment_4_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Text:
		//	{Text} 'Text' name=ID? ':' (h1?='#' | h2?='##' | h3?='###')? STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Text} 'Text' name=ID? ':' (h1?='#' | h2?='##' | h3?='###')? STRING
		public Group getGroup() { return cGroup; }
		
		//{Text}
		public Action getTextAction_0() { return cTextAction_0; }
		
		//'Text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(h1?='#' | h2?='##' | h3?='###')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//h1?='#'
		public Assignment getH1Assignment_4_0() { return cH1Assignment_4_0; }
		
		//'#'
		public Keyword getH1NumberSignKeyword_4_0_0() { return cH1NumberSignKeyword_4_0_0; }
		
		//h2?='##'
		public Assignment getH2Assignment_4_1() { return cH2Assignment_4_1; }
		
		//'##'
		public Keyword getH2NumberSignNumberSignKeyword_4_1_0() { return cH2NumberSignNumberSignKeyword_4_1_0; }
		
		//h3?='###'
		public Assignment getH3Assignment_4_2() { return cH3Assignment_4_2; }
		
		//'###'
		public Keyword getH3NumberSignNumberSignNumberSignKeyword_4_2_0() { return cH3NumberSignNumberSignNumberSignKeyword_4_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5() { return cSTRINGTerminalRuleCall_5; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLinkAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cLinkLinkCrossReference_3_0_0 = (CrossReference)cLinkAssignment_3_0.eContents().get(0);
		private final RuleCall cLinkLinkIDTerminalRuleCall_3_0_0_1 = (RuleCall)cLinkLinkCrossReference_3_0_0.eContents().get(1);
		private final Assignment cNewlinkAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNewlinkLinkParserRuleCall_3_1_0 = (RuleCall)cNewlinkAssignment_3_1.eContents().get(0);
		
		//Image:
		//	'Image' name=ID ':' (link=[Link] | newlink=Link);
		@Override public ParserRule getRule() { return rule; }
		
		//'Image' name=ID ':' (link=[Link] | newlink=Link)
		public Group getGroup() { return cGroup; }
		
		//'Image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(link=[Link] | newlink=Link)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//link=[Link]
		public Assignment getLinkAssignment_3_0() { return cLinkAssignment_3_0; }
		
		//[Link]
		public CrossReference getLinkLinkCrossReference_3_0_0() { return cLinkLinkCrossReference_3_0_0; }
		
		//ID
		public RuleCall getLinkLinkIDTerminalRuleCall_3_0_0_1() { return cLinkLinkIDTerminalRuleCall_3_0_0_1; }
		
		//newlink=Link
		public Assignment getNewlinkAssignment_3_1() { return cNewlinkAssignment_3_1; }
		
		//Link
		public RuleCall getNewlinkLinkParserRuleCall_3_1_0() { return cNewlinkLinkParserRuleCall_3_1_0; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAddressAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAddressSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cAddressAssignment_3_0.eContents().get(0);
		private final Assignment cAnchorAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cAnchorContentCrossReference_3_1_0 = (CrossReference)cAnchorAssignment_3_1.eContents().get(0);
		private final RuleCall cAnchorContentIDTerminalRuleCall_3_1_0_1 = (RuleCall)cAnchorContentCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLinktextKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLinktextAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLinktextSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLinktextAssignment_4_1.eContents().get(0);
		
		//Link:
		//	'Link' name=ID? ':' (address=STRING | anchor=[Content]) ('linktext' linktext=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Link' name=ID? ':' (address=STRING | anchor=[Content]) ('linktext' linktext=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(address=STRING | anchor=[Content])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//address=STRING
		public Assignment getAddressAssignment_3_0() { return cAddressAssignment_3_0; }
		
		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_3_0_0() { return cAddressSTRINGTerminalRuleCall_3_0_0; }
		
		//anchor=[Content]
		public Assignment getAnchorAssignment_3_1() { return cAnchorAssignment_3_1; }
		
		//[Content]
		public CrossReference getAnchorContentCrossReference_3_1_0() { return cAnchorContentCrossReference_3_1_0; }
		
		//ID
		public RuleCall getAnchorContentIDTerminalRuleCall_3_1_0_1() { return cAnchorContentIDTerminalRuleCall_3_1_0_1; }
		
		//('linktext' linktext=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'linktext'
		public Keyword getLinktextKeyword_4_0() { return cLinktextKeyword_4_0; }
		
		//linktext=STRING
		public Assignment getLinktextAssignment_4_1() { return cLinktextAssignment_4_1; }
		
		//STRING
		public RuleCall getLinktextSTRINGTerminalRuleCall_4_1_0() { return cLinktextSTRINGTerminalRuleCall_4_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cContentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDivParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cElemAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cElemContentCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemContentIDTerminalRuleCall_1_0_1 = (RuleCall)cElemContentCrossReference_1_0.eContents().get(1);
		
		//Element:
		//	(Content | Div) | elem=[Content];
		@Override public ParserRule getRule() { return rule; }
		
		//(Content | Div) | elem=[Content]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Content | Div)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Content
		public RuleCall getContentParserRuleCall_0_0() { return cContentParserRuleCall_0_0; }
		
		//Div
		public RuleCall getDivParserRuleCall_0_1() { return cDivParserRuleCall_0_1; }
		
		//elem=[Content]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }
		
		//[Content]
		public CrossReference getElemContentCrossReference_1_0() { return cElemContentCrossReference_1_0; }
		
		//ID
		public RuleCall getElemContentIDTerminalRuleCall_1_0_1() { return cElemContentIDTerminalRuleCall_1_0_1; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiv_idAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiv_idIDTerminalRuleCall_0_0 = (RuleCall)cDiv_idAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDivelementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDivelementsElementParserRuleCall_2_0 = (RuleCall)cDivelementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSeparatorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSeparatorsSeparatorParserRuleCall_3_0_0 = (RuleCall)cSeparatorsAssignment_3_0.eContents().get(0);
		private final Assignment cDivelementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDivelementsElementParserRuleCall_3_1_0 = (RuleCall)cDivelementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Div:
		//	div_id=ID? '{' divelements+=Element (separators+=Separator divelements+=Element)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//div_id=ID? '{' divelements+=Element (separators+=Separator divelements+=Element)* '}'
		public Group getGroup() { return cGroup; }
		
		//div_id=ID?
		public Assignment getDiv_idAssignment_0() { return cDiv_idAssignment_0; }
		
		//ID
		public RuleCall getDiv_idIDTerminalRuleCall_0_0() { return cDiv_idIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//divelements+=Element
		public Assignment getDivelementsAssignment_2() { return cDivelementsAssignment_2; }
		
		//Element
		public RuleCall getDivelementsElementParserRuleCall_2_0() { return cDivelementsElementParserRuleCall_2_0; }
		
		//(separators+=Separator divelements+=Element)*
		public Group getGroup_3() { return cGroup_3; }
		
		//separators+=Separator
		public Assignment getSeparatorsAssignment_3_0() { return cSeparatorsAssignment_3_0; }
		
		//Separator
		public RuleCall getSeparatorsSeparatorParserRuleCall_3_0_0() { return cSeparatorsSeparatorParserRuleCall_3_0_0; }
		
		//divelements+=Element
		public Assignment getDivelementsAssignment_3_1() { return cDivelementsAssignment_3_1; }
		
		//Element
		public RuleCall getDivelementsElementParserRuleCall_3_1_0() { return cDivelementsElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Separator:
		//	Next | Then;
		@Override public ParserRule getRule() { return rule; }
		
		//Next | Then
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Next
		public RuleCall getNextParserRuleCall_0() { return cNextParserRuleCall_0; }
		
		//Then
		public RuleCall getThenParserRuleCall_1() { return cThenParserRuleCall_1; }
	}
	public class NextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Next");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasratioAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasratioLeftParenthesisKeyword_2_0_0 = (Keyword)cHasratioAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cRatiosAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cRatiosINTTerminalRuleCall_2_1_0_0 = (RuleCall)cRatiosAssignment_2_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cRatiosAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRatiosINTTerminalRuleCall_2_2_0 = (RuleCall)cRatiosAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Next:
		//	{Next} '<next' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Next} '<next' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>'
		public Group getGroup() { return cGroup; }
		
		//{Next}
		public Action getNextAction_0() { return cNextAction_0; }
		
		//'<next'
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }
		
		//(hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//hasratio?='('
		public Assignment getHasratioAssignment_2_0() { return cHasratioAssignment_2_0; }
		
		//'('
		public Keyword getHasratioLeftParenthesisKeyword_2_0_0() { return cHasratioLeftParenthesisKeyword_2_0_0; }
		
		//(ratios+=INT '/')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//ratios+=INT
		public Assignment getRatiosAssignment_2_1_0() { return cRatiosAssignment_2_1_0; }
		
		//INT
		public RuleCall getRatiosINTTerminalRuleCall_2_1_0_0() { return cRatiosINTTerminalRuleCall_2_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2_1_1() { return cSolidusKeyword_2_1_1; }
		
		//ratios+=INT
		public Assignment getRatiosAssignment_2_2() { return cRatiosAssignment_2_2; }
		
		//INT
		public RuleCall getRatiosINTTerminalRuleCall_2_2_0() { return cRatiosINTTerminalRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.HTMLbuild.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasratioAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasratioLeftParenthesisKeyword_2_0_0 = (Keyword)cHasratioAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cRatiosAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cRatiosINTTerminalRuleCall_2_1_0_0 = (RuleCall)cRatiosAssignment_2_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cRatiosAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRatiosINTTerminalRuleCall_2_2_0 = (RuleCall)cRatiosAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Then:
		//	{Then} '<then' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Then} '<then' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>'
		public Group getGroup() { return cGroup; }
		
		//{Then}
		public Action getThenAction_0() { return cThenAction_0; }
		
		//'<then'
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }
		
		//(hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//hasratio?='('
		public Assignment getHasratioAssignment_2_0() { return cHasratioAssignment_2_0; }
		
		//'('
		public Keyword getHasratioLeftParenthesisKeyword_2_0_0() { return cHasratioLeftParenthesisKeyword_2_0_0; }
		
		//(ratios+=INT '/')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//ratios+=INT
		public Assignment getRatiosAssignment_2_1_0() { return cRatiosAssignment_2_1_0; }
		
		//INT
		public RuleCall getRatiosINTTerminalRuleCall_2_1_0_0() { return cRatiosINTTerminalRuleCall_2_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2_1_1() { return cSolidusKeyword_2_1_1; }
		
		//ratios+=INT
		public Assignment getRatiosAssignment_2_2() { return cRatiosAssignment_2_2; }
		
		//INT
		public RuleCall getRatiosINTTerminalRuleCall_2_2_0() { return cRatiosINTTerminalRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final TypeElements pType;
	private final StyleElements pStyle;
	private final ContentElements pContent;
	private final TextElements pText;
	private final ImageElements pImage;
	private final LinkElements pLink;
	private final ElementElements pElement;
	private final DivElements pDiv;
	private final SeparatorElements pSeparator;
	private final NextElements pNext;
	private final ThenElements pThen;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HTMLbuildGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pType = new TypeElements();
		this.pStyle = new StyleElements();
		this.pContent = new ContentElements();
		this.pText = new TextElements();
		this.pImage = new ImageElements();
		this.pLink = new LinkElements();
		this.pElement = new ElementElements();
		this.pDiv = new DivElements();
		this.pSeparator = new SeparatorElements();
		this.pNext = new NextElements();
		this.pThen = new ThenElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.HTMLbuild".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Type*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Type:
	//	Style | Content | Div;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Style:
	//	'Style' style_id=ID ':' (link=[Link] | newlink=Link);
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}
	
	//Content:
	//	Text | Image | Link;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Text:
	//	{Text} 'Text' name=ID? ':' (h1?='#' | h2?='##' | h3?='###')? STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Image:
	//	'Image' name=ID ':' (link=[Link] | newlink=Link);
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Link:
	//	'Link' name=ID? ':' (address=STRING | anchor=[Content]) ('linktext' linktext=STRING)?;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Element:
	//	(Content | Div) | elem=[Content];
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Div:
	//	div_id=ID? '{' divelements+=Element (separators+=Separator divelements+=Element)* '}';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//Separator:
	//	Next | Then;
	public SeparatorElements getSeparatorAccess() {
		return pSeparator;
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}
	
	//Next:
	//	{Next} '<next' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>';
	public NextElements getNextAccess() {
		return pNext;
	}
	
	public ParserRule getNextRule() {
		return getNextAccess().getRule();
	}
	
	//Then:
	//	{Then} '<then' (hasratio?='(' (ratios+=INT '/')? ratios+=INT ')')? '>';
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
